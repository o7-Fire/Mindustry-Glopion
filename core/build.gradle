
sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_1_8

task base(type: Jar){
    archiveFileName = "core.jar"//Mindustry-Glopion,jar
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)//stop including duplicated copy of library, D8 really mad
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }//Runtime library only, compile library like arc won't get included
    }
    with jar
    manifest.attributes('Main-Class': modsNJavaMain)//what

}



task baseJar{
    dependsOn base//typical jar
    //collect dependencies needed for desugaring
    if(new File(sdkD8).exists()) {
        def files = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(sdkJar)])//all dependency go
        def dependencies = files.collect { "--classpath $it.path" }.join(" ")//argument builder
        def cmd = "${sdkD8} $dependencies --min-api ${minAndroidApi} --output Dex.jar core.jar"//should output Dex.jar from Mindustry-Glopion.jar
        def dir = new File(buildDir, "libs/");
        dir.mkdirs()//cuz sike, file not found exception
        doLast {
            if (new File(sdkD8).exists() && new File(sdkJar).exists()) {
                println(cmd)//comment this to disable spam
                println("D8:"+ Runtime.getRuntime().exec(cmd, new String[0], dir).waitForProcessOutput(System.out, System.err))
            }
        }
    }else {
        println "No sdkD8 detected on ANDROID_HOME, skipping desugaring"//y not
    }
}

task makeJar(type: Jar){
    dependsOn baseJar//dex jar
    archiveFileName = "core-Dexed.jar"
    if(new File(sdkD8).exists()) {//some people don't have android SDK
        duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
        if (new File(sdkD8).exists()) {
            from() {
                zipTree(new File(projectDir, "build/libs/Dex.jar"))//include Dex.jar
            }
        }
    }else {
        println "No sdkD8 detected on ANDROID_HOME, skipping making Combined Dex-Class Jar"
    }
    from() {
        zipTree(new File(projectDir, "build/libs/core.jar"))//include YourModsName.jar or typical.jar
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'//deprecated
    from sourceSets.main.allSource
}
artifacts {
    archives sourcesJar
    archives base
}